var mqtt=require('mqtt');var Http=require('./Http');var Logger=require('./Logger');var EventEmitter=require('events');var crypto=require('crypto');var uuid=require('uuid');var Utils=require('./Utils');const default_public_key='MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCwN6xgd6Ad8v2hIIsQVnbt8a3JituR8o4Tc3B5WlcFR55bz4OMqrG/356Ur3cPbc2Fe8ArNd/0gZbC9q56Eb16JTkVNA/fye4SXznWxdyBPR7+guuJZHc/VW2fKH2lfZ2P3Tt0QkKZZoawYOGSMdIvO+WqK44updyax0ikK6JlNQIDAQAB';var messageConfig={base_url:'https://api.adapay.tech',instance_id:'post-cn-0pp18zowf0m',access_key:'LTAIOP5RkeiuXieW',group_id:'GID_CRHS_ASYN',client_id:'',broker_url:'post-cn-0pp18zowf0m.mqtt.aliyuncs.com',log_file_path:'./',log_level:'warn',log_console_enable:false,prod_mode:'1',debug:false,connect_timeout:30000,api_key:'',private_key_path:'',private_key:'',public_key_path:'',public_key:default_public_key,};class PayMessage extends EventEmitter{constructor(config,path){super(config);Object.assign(messageConfig,config);Logger.setConfig(messageConfig);this._setMerchantPath(path);var hash=crypto.createHash('md5');hash.update(messageConfig.api_key+uuid.v1);messageConfig.client_id=messageConfig.group_id+'@@@'+hash.digest('hex');this._initConfig()}_setMerchantPath(path){try{this._cleanConfig();if(typeof path==='string'&&path.length>0){var jsonString=Utils.readFile(path);var json=JSON.parse(jsonString);if(json){if(messageConfig.prod_mode==1){messageConfig.api_key=json.api_key_live}else{messageConfig.api_key=json.api_key_test}messageConfig.public_key=json.rsa_public_key||messageConfig.default_public_key;messageConfig.private_key=json.rsa_private_key}}Logger.info(messageConfig)}catch(error){Logger.error(error)}}_cleanConfig(){messageConfig.prod_mode="1";messageConfig.api_key='';messageConfig.private_key_path='';messageConfig.private_key='';messageConfig.public_key_path='';messageConfig.public_key='';messageConfig.base_url='https://api.adapay.tech'};async _initConfig(){if(typeof messageConfig.client_id==='string'&&messageConfig.client_id.length>0){this.client_id=messageConfig.client_id}else{var hash=crypto.createHash('md5');hash.update(messageConfig.api_key+uuid.v1);this.client_id=messageConfig.group_id+'@@@'+hash.digest('hex')}this.topic='topic_crhs_sender/'+messageConfig.api_key;this.username='Token|'+messageConfig.access_key+'|'+messageConfig.instance_id;this.token=await this._requestToken();this.password='R|'+this.token;this._mqttConnect()}_mqttConnect(){let self=this;let options={username:this.username,password:this.password,clientId:this.client_id,keepalive:90,connectTimeout:messageConfig.connect_timeout};this.client=mqtt.connect('tcp://'+messageConfig.broker_url+":1883",options);this.client.on('connect',function(){self._subscribe();self.emit('connect')});this.client.on('error',function(err){Logger.info('mqtt connect error: '+err.toString());self.emit('error',err);setTimeout(function(){self._mqttConnect()},3000)});this.client.on('message',function(topic,message){Logger.info('mqtt connect message: '+message.toString());self.emit('message',topic,message)})}_subscribe(){let self=this;self.client.subscribe(this.topic,{'qos':0},function(error,granted){if(error){Logger.info('mqtt subscribe error: '+error.toString());self._subscribe()}self.emit('subscribe',error,granted)})}async _requestToken(){let expire_time=30000000000;try{let resJson=await Http.post(messageConfig.base_url+'/v1/token/apply',{'expire_time':expire_time},messageConfig);let data=JSON.parse(resJson);if(data&&data.status==='succeeded'){return data.token}Logger.info('PayMessage: token request failed');return''}catch(error){Logger.info(error.toString);return''}}}module.exports=PayMessage;